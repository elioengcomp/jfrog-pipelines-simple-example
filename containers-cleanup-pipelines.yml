pipelines:
  - name: affinity_group_pipeline
    steps:
      - name: agp_s1
        type: Bash
        configuration:
          affinityGroup: agp_container
        execution:
          onExecute:
            # Generate random container name
            - RAND_ID=$(tr -dc A-Za-z0-9 < /dev/urandom | head -c 8)
            - CONT_NAME="alpine-$RAND_ID"
            - echo "Container name $CONT_NAME"
            - add_run_variables container_name=$CONT_NAME
            # Create container
            - docker run -d --name $CONT_NAME alpine

      - name: agp_s2
        type: Bash
        configuration:
          affinityGroup: agp_container
          inputSteps:
            - name: agp_s1
        execution:
          onExecute:
            # Get run container name
            - echo "Container name $container_name"
            # Count container by name
            # Count should be equals 1 since container was created by previous step on same affinity group
            - COUNT=$(docker ps -aq -f name=$container_name | wc -l)
            - echo "Count $COUNT"
            - |
              [[ "$COUNT" == "1" ]]
            # Delete container
            - docker rm -fv $container_name

  # This test is only effective if executed on a node poll with a single static node to assure the steps will run on the same node
  - name: non_affinity_group_pipeline
    steps:
      - name: nagp_s1
        type: Bash
        execution:
          onExecute:
            # Generate random container name
            - RAND_ID=$(tr -dc A-Za-z0-9 < /dev/urandom | head -c 8)
            - CONT_NAME="alpine-$RAND_ID"
            - echo "Container name $CONT_NAME"
            - add_run_variables container_name=$CONT_NAME
            # Create container
            - docker run -d --name $CONT_NAME alpine

      - name: nagp_s2
        type: Bash
        configuration:
          inputSteps:
            - name: nagp_s1
        execution:
          onExecute:
            # Get run container name
            - echo "Container name $container_name"
            # Count container by name
            # Count should be equals 0 since container was created by previous step on different affinity group
            - COUNT=$(docker ps -aq -f name=$container_name | wc -l)
            - echo "Count $COUNT"
            - |
              [[ "$COUNT" == "0" ]]

  - name: win_affinity_group_pipeline
    steps:
      - name: wagp_s1
        type: PowerShell
        configuration:
          affinityGroup: wagp_container
        execution:
          onExecute:
            # Generate random container name
            - $env:RAND_ID = -join ((65..90) + (97..122) | Get-Random -Count 8 | % {[char]$_})
            - $env:CONT_NAME="win-$env:RAND_ID"
            - echo "Container name $env:CONT_NAME"
            - add_run_variables container_name=$env:CONT_NAME
            # Create container
            - docker run -d --name $env:CONT_NAME mcr.microsoft.com/windows/nanoserver:1809-amd64

      - name: agp_s2
        type: PowerShell
        configuration:
          affinityGroup: wagp_container
          inputSteps:
            - name: wagp_s1
        execution:
          onExecute:
            # Get run container name
            - echo "Container name $env:container_name"
            # Count container by name
            # Count should be equals 1 since container was created by previous step on same affinity group
            - $env:COUNT=$(docker ps -aq -f name=$env:container_name | find /c /v """""")
            - echo "Count $env:COUNT"
            - |
              if ("$env:COUNT" -ne "1") {
                Write-Error "Error" -ErrorAction Stop
              }
            # Delete container
            - docker rm -fv $env:container_name

